//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MeetingScheduler
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using MeetingScheduler.Web;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
        
        /// <summary>
        /// Gets a user representing the authenticated identity.
        /// </summary>
        public new User User
        {
            get
            {
                return ((User)(base.User));
            }
        }
    }
}
namespace MeetingScheduler.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    using MeetingScheduler.Web.Resources;
    
    
    /// <summary>
    /// The 'AppointmentResource' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MeetingScheduler.Web")]
    public sealed partial class AppointmentResource : Entity
    {
        
        private int _id;
        
        private EntityRef<Resource> _resource;
        
        private int _resourceId;
        
        private Guid _sqlAppointmentId;
        
        private EntityRef<SqlAppointment> _sqlAppointments;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnResourceIdChanging(int value);
        partial void OnResourceIdChanged();
        partial void OnSqlAppointmentIdChanging(Guid value);
        partial void OnSqlAppointmentIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AppointmentResource"/> class.
        /// </summary>
        public AppointmentResource()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Resource"/> entity.
        /// </summary>
        [Association("Resource_AppointmentResources", "ResourceId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public Resource Resource
        {
            get
            {
                if ((this._resource == null))
                {
                    this._resource = new EntityRef<Resource>(this, "Resource", this.FilterResource);
                }
                return this._resource.Entity;
            }
            set
            {
                Resource previous = this.Resource;
                if ((previous != value))
                {
                    this.ValidateProperty("Resource", value);
                    if ((previous != null))
                    {
                        this._resource.Entity = null;
                        previous.AppointmentResources.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceId = value.Id;
                    }
                    else
                    {
                        this.ResourceId = default(int);
                    }
                    this._resource.Entity = value;
                    if ((value != null))
                    {
                        value.AppointmentResources.Add(this);
                    }
                    this.RaisePropertyChanged("Resource");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int ResourceId
        {
            get
            {
                return this._resourceId;
            }
            set
            {
                if ((this._resourceId != value))
                {
                    this.OnResourceIdChanging(value);
                    this.RaiseDataMemberChanging("ResourceId");
                    this.ValidateProperty("ResourceId", value);
                    this._resourceId = value;
                    this.RaiseDataMemberChanged("ResourceId");
                    this.OnResourceIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SqlAppointmentId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Guid SqlAppointmentId
        {
            get
            {
                return this._sqlAppointmentId;
            }
            set
            {
                if ((this._sqlAppointmentId != value))
                {
                    this.OnSqlAppointmentIdChanging(value);
                    this.RaiseDataMemberChanging("SqlAppointmentId");
                    this.ValidateProperty("SqlAppointmentId", value);
                    this._sqlAppointmentId = value;
                    this.RaiseDataMemberChanged("SqlAppointmentId");
                    this.OnSqlAppointmentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlAppointment"/> entity.
        /// </summary>
        [Association("SqlAppointments_AppointmentResources", "SqlAppointmentId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlAppointment SqlAppointments
        {
            get
            {
                if ((this._sqlAppointments == null))
                {
                    this._sqlAppointments = new EntityRef<SqlAppointment>(this, "SqlAppointments", this.FilterSqlAppointments);
                }
                return this._sqlAppointments.Entity;
            }
            set
            {
                SqlAppointment previous = this.SqlAppointments;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlAppointments", value);
                    if ((previous != null))
                    {
                        this._sqlAppointments.Entity = null;
                        previous.AppointmentResources.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SqlAppointmentId = value.Id;
                    }
                    else
                    {
                        this.SqlAppointmentId = default(Guid);
                    }
                    this._sqlAppointments.Entity = value;
                    if ((value != null))
                    {
                        value.AppointmentResources.Add(this);
                    }
                    this.RaisePropertyChanged("SqlAppointments");
                }
            }
        }
        
        private bool FilterResource(Resource entity)
        {
            return (entity.Id == this.ResourceId);
        }
        
        private bool FilterSqlAppointments(SqlAppointment entity)
        {
            return (entity.Id == this.SqlAppointmentId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'AuthenticationService' DomainService.
    /// </summary>
    public sealed partial class AuthenticationContext : global::System.ServiceModel.DomainServices.Client.ApplicationServices.AuthenticationDomainContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class.
        /// </summary>
        public AuthenticationContext() : 
                this(new WebDomainClient<IAuthenticationServiceContract>(new Uri("MeetingScheduler-Web-AuthenticationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The AuthenticationService service URI.</param>
        public AuthenticationContext(Uri serviceUri) : 
                this(new WebDomainClient<IAuthenticationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public AuthenticationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="User"/> entity instances that have been loaded into this <see cref="AuthenticationContext"/> instance.
        /// </summary>
        public EntitySet<User> Users
        {
            get
            {
                return base.EntityContainer.GetEntitySet<User>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'GetUser' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> GetUserQuery()
        {
            this.ValidateMethod("GetUserQuery", null);
            return base.CreateQuery<User>("GetUser", null, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Login' query.
        /// </summary>
        /// <param name="userName">The value for the 'userName' parameter of the query.</param>
        /// <param name="password">The value for the 'password' parameter of the query.</param>
        /// <param name="isPersistent">The value for the 'isPersistent' parameter of the query.</param>
        /// <param name="customData">The value for the 'customData' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LoginQuery(string userName, string password, bool isPersistent, string customData)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("userName", userName);
            parameters.Add("password", password);
            parameters.Add("isPersistent", isPersistent);
            parameters.Add("customData", customData);
            this.ValidateMethod("LoginQuery", parameters);
            return base.CreateQuery<User>("Login", parameters, true, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="User"/> entity instances using the 'Logout' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="User"/> entity instances.</returns>
        public EntityQuery<User> LogoutQuery()
        {
            this.ValidateMethod("LogoutQuery", null);
            return base.CreateQuery<User>("Logout", null, true, false);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new AuthenticationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'AuthenticationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IAuthenticationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetUser' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/GetUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/GetUser", ReplyAction="http://tempuri.org/AuthenticationService/GetUserResponse")]
            [WebGet()]
            IAsyncResult BeginGetUser(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUser'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUser' operation.</returns>
            QueryResult<User> EndGetUser(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Login' operation.
            /// </summary>
            /// <param name="userName">The value for the 'userName' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="isPersistent">The value for the 'isPersistent' parameter of this action.</param>
            /// <param name="customData">The value for the 'customData' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LoginDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Login", ReplyAction="http://tempuri.org/AuthenticationService/LoginResponse")]
            IAsyncResult BeginLogin(string userName, string password, bool isPersistent, string customData, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogin'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogin'.</param>
            /// <returns>The 'QueryResult' returned from the 'Login' operation.</returns>
            QueryResult<User> EndLogin(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'Logout' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/LogoutDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/Logout", ReplyAction="http://tempuri.org/AuthenticationService/LogoutResponse")]
            IAsyncResult BeginLogout(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginLogout'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginLogout'.</param>
            /// <returns>The 'QueryResult' returned from the 'Logout' operation.</returns>
            QueryResult<User> EndLogout(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/AuthenticationService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/AuthenticationService/SubmitChanges", ReplyAction="http://tempuri.org/AuthenticationService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class AuthenticationContextEntityContainer : EntityContainer
        {
            
            public AuthenticationContextEntityContainer()
            {
                this.CreateEntitySet<User>(EntitySetOperations.Edit);
            }
        }
    }
    
    public enum CreateUserStatus
    {
        
        Success = 0,
        
        InvalidUserName = 1,
        
        InvalidPassword = 2,
        
        InvalidQuestion = 3,
        
        InvalidAnswer = 4,
        
        InvalidEmail = 5,
        
        DuplicateUserName = 6,
        
        DuplicateEmail = 7,
        
        Failure = 8,
    }
    
    /// <summary>
    /// The 'RegistrationData' class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MeetingScheduler.Web")]
    public sealed partial class RegistrationData : ComplexObject
    {
        
        private string _answer;
        
        private string _email;
        
        private string _friendlyName;
        
        private string _question;
        
        private string _userName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAnswerChanging(string value);
        partial void OnAnswerChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnQuestionChanging(string value);
        partial void OnQuestionChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationData"/> class.
        /// </summary>
        public RegistrationData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Answer' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityAnswerLabel", Order=6, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(128, ErrorMessageResourceName="ValidationErrorBadAnswerLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Answer
        {
            get
            {
                return this._answer;
            }
            set
            {
                if ((this._answer != value))
                {
                    this.OnAnswerChanging(value);
                    this.RaiseDataMemberChanging("Answer");
                    this.ValidateProperty("Answer", value);
                    this._answer = value;
                    this.RaiseDataMemberChanged("Answer");
                    this.OnAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [Display(Name="EmailLabel", Order=2, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^([\\w-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([\\w-]+\\.)+))([a-zA-Z]{2,4" +
            "}|[0-9]{1,3})(\\]?)$", ErrorMessageResourceName="ValidationErrorInvalidEmail", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        [Display(Description="FriendlyNameDescription", Name="FriendlyNameLabel", Order=1, ResourceType=typeof(RegistrationDataResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadFriendlyNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Question' value.
        /// </summary>
        [DataMember()]
        [Display(Name="SecurityQuestionLabel", Order=5, ResourceType=typeof(RegistrationDataResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    this.OnQuestionChanging(value);
                    this.RaiseDataMemberChanging("Question");
                    this.ValidateProperty("Question", value);
                    this._question = value;
                    this.RaiseDataMemberChanged("Question");
                    this.OnQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserName' value.
        /// </summary>
        [DataMember()]
        [Display(Name="UserNameLabel", Order=0, ResourceType=typeof(RegistrationDataResources))]
        [RegularExpression("^[a-zA-Z0-9_]*$", ErrorMessageResourceName="ValidationErrorInvalidUserName", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))]
        [StringLength(255, ErrorMessageResourceName="ValidationErrorBadUserNameLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=4)]
        public string UserName
        {
            get
            {
                return this._userName;
            }
            set
            {
                if ((this._userName != value))
                {
                    this.OnUserNameChanging(value);
                    this.RaiseDataMemberChanging("UserName");
                    this.ValidateProperty("UserName", value);
                    this._userName = value;
                    this.RaiseDataMemberChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    }
    
    /// <summary>
    /// The 'Resource' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MeetingScheduler.Web")]
    public sealed partial class Resource : Entity
    {
        
        private EntityCollection<AppointmentResource> _appointmentResources;
        
        private string _color;
        
        private string _displayName;
        
        private int _id;
        
        private string _name;
        
        private int _resourceTypeId;
        
        private EntityRef<ResourceType> _resourceTypes;
        
        private EntityCollection<UserTeam> _userTeam;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnColorChanging(string value);
        partial void OnColorChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnResourceTypeIdChanging(int value);
        partial void OnResourceTypeIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Resource"/> class.
        /// </summary>
        public Resource()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="AppointmentResource"/> entity instances.
        /// </summary>
        [Association("Resource_AppointmentResources", "Id", "ResourceId")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<AppointmentResource> AppointmentResources
        {
            get
            {
                if ((this._appointmentResources == null))
                {
                    this._appointmentResources = new EntityCollection<AppointmentResource>(this, "AppointmentResources", this.FilterAppointmentResources, this.AttachAppointmentResources, this.DetachAppointmentResources);
                }
                return this._appointmentResources;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Color' value.
        /// </summary>
        [DataMember()]
        [Display(Order=2)]
        [StringLength(15)]
        public string Color
        {
            get
            {
                return this._color;
            }
            set
            {
                if ((this._color != value))
                {
                    this.OnColorChanging(value);
                    this.RaiseDataMemberChanging("Color");
                    this.ValidateProperty("Color", value);
                    this._color = value;
                    this.RaiseDataMemberChanged("Color");
                    this.OnColorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayName' value.
        /// </summary>
        [DataMember()]
        [Display(Order=1)]
        [StringLength(100)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.RaiseDataMemberChanging("DisplayName");
                    this.ValidateProperty("DisplayName", value);
                    this._displayName = value;
                    this.RaiseDataMemberChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(Order=0)]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ResourceTypeId' value.
        /// </summary>
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [RoundtripOriginal()]
        public int ResourceTypeId
        {
            get
            {
                return this._resourceTypeId;
            }
            set
            {
                if ((this._resourceTypeId != value))
                {
                    this.OnResourceTypeIdChanging(value);
                    this.RaiseDataMemberChanging("ResourceTypeId");
                    this.ValidateProperty("ResourceTypeId", value);
                    this._resourceTypeId = value;
                    this.RaiseDataMemberChanged("ResourceTypeId");
                    this.OnResourceTypeIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="ResourceType"/> entity.
        /// </summary>
        [Association("ResourceTypes_Resource", "ResourceTypeId", "Id", IsForeignKey=true)]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public ResourceType ResourceTypes
        {
            get
            {
                if ((this._resourceTypes == null))
                {
                    this._resourceTypes = new EntityRef<ResourceType>(this, "ResourceTypes", this.FilterResourceTypes);
                }
                return this._resourceTypes.Entity;
            }
            set
            {
                ResourceType previous = this.ResourceTypes;
                if ((previous != value))
                {
                    this.ValidateProperty("ResourceTypes", value);
                    if ((previous != null))
                    {
                        this._resourceTypes.Entity = null;
                        previous.Resource.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ResourceTypeId = value.Id;
                    }
                    else
                    {
                        this.ResourceTypeId = default(int);
                    }
                    this._resourceTypes.Entity = value;
                    if ((value != null))
                    {
                        value.Resource.Add(this);
                    }
                    this.RaisePropertyChanged("ResourceTypes");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="UserTeam"/> entity instances.
        /// </summary>
        [Association("Resource_UserTeam", "Id", "Team")]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public EntityCollection<UserTeam> UserTeam
        {
            get
            {
                if ((this._userTeam == null))
                {
                    this._userTeam = new EntityCollection<UserTeam>(this, "UserTeam", this.FilterUserTeam, this.AttachUserTeam, this.DetachUserTeam);
                }
                return this._userTeam;
            }
        }
        
        private void AttachAppointmentResources(AppointmentResource entity)
        {
            entity.Resource = this;
        }
        
        private void DetachAppointmentResources(AppointmentResource entity)
        {
            entity.Resource = null;
        }
        
        private bool FilterAppointmentResources(AppointmentResource entity)
        {
            return (entity.ResourceId == this.Id);
        }
        
        private bool FilterResourceTypes(ResourceType entity)
        {
            return (entity.Id == this.ResourceTypeId);
        }
        
        private void AttachUserTeam(UserTeam entity)
        {
            entity.Resource = this;
        }
        
        private void DetachUserTeam(UserTeam entity)
        {
            entity.Resource = null;
        }
        
        private bool FilterUserTeam(UserTeam entity)
        {
            return (entity.Team == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'ResourceType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MeetingScheduler.Web")]
    public sealed partial class ResourceType : Entity
    {
        
        private Nullable<bool> _allowMultipleSelection;
        
        private string _displayName;
        
        private int _id;
        
        private string _name;
        
        private EntityCollection<Resource> _resource;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAllowMultipleSelectionChanging(Nullable<bool> value);
        partial void OnAllowMultipleSelectionChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceType"/> class.
        /// </summary>
        public ResourceType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AllowMultipleSelection' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> AllowMultipleSelection
        {
            get
            {
                return this._allowMultipleSelection;
            }
            set
            {
                if ((this._allowMultipleSelection != value))
                {
                    this.OnAllowMultipleSelectionChanging(value);
                    this.RaiseDataMemberChanging("AllowMultipleSelection");
                    this.ValidateProperty("AllowMultipleSelection", value);
                    this._allowMultipleSelection = value;
                    this.RaiseDataMemberChanged("AllowMultipleSelection");
                    this.OnAllowMultipleSelectionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayName' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string DisplayName
        {
            get
            {
                return this._displayName;
            }
            set
            {
                if ((this._displayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.RaiseDataMemberChanging("DisplayName");
                    this.ValidateProperty("DisplayName", value);
                    this._displayName = value;
                    this.RaiseDataMemberChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(100)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Resource"/> entity instances.
        /// </summary>
        [Association("ResourceTypes_Resource", "Id", "ResourceTypeId")]
        [XmlIgnore()]
        public EntityCollection<Resource> Resource
        {
            get
            {
                if ((this._resource == null))
                {
                    this._resource = new EntityCollection<Resource>(this, "Resource", this.FilterResource, this.AttachResource, this.DetachResource);
                }
                return this._resource;
            }
        }
        
        private void AttachResource(Resource entity)
        {
            entity.ResourceTypes = this;
        }
        
        private void DetachResource(Resource entity)
        {
            entity.ResourceTypes = null;
        }
        
        private bool FilterResource(Resource entity)
        {
            return (entity.ResourceTypeId == this.Id);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'SchedulerDomainService' DomainService.
    /// </summary>
    public sealed partial class SchedulerDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulerDomainContext"/> class.
        /// </summary>
        public SchedulerDomainContext() : 
                this(new WebDomainClient<ISchedulerDomainServiceContract>(new Uri("MeetingScheduler-Web-SchedulerDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulerDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SchedulerDomainService service URI.</param>
        public SchedulerDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISchedulerDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SchedulerDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SchedulerDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Resource"/> entity instances that have been loaded into this <see cref="SchedulerDomainContext"/> instance.
        /// </summary>
        public EntitySet<Resource> Resources
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Resource>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="AppointmentResource"/> entity instances that have been loaded into this <see cref="SchedulerDomainContext"/> instance.
        /// </summary>
        public EntitySet<AppointmentResource> AppointmentResources
        {
            get
            {
                return base.EntityContainer.GetEntitySet<AppointmentResource>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="ResourceType"/> entity instances that have been loaded into this <see cref="SchedulerDomainContext"/> instance.
        /// </summary>
        public EntitySet<ResourceType> ResourceTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ResourceType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SqlAppointment"/> entity instances that have been loaded into this <see cref="SchedulerDomainContext"/> instance.
        /// </summary>
        public EntitySet<SqlAppointment> SqlAppointments
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SqlAppointment>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="UserTeam"/> entity instances that have been loaded into this <see cref="SchedulerDomainContext"/> instance.
        /// </summary>
        public EntitySet<UserTeam> UserTeams
        {
            get
            {
                return base.EntityContainer.GetEntitySet<UserTeam>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Resource"/> entity instances using the 'GeResourceByID' query.
        /// </summary>
        /// <param name="ID">The value for the 'ID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Resource"/> entity instances.</returns>
        public EntityQuery<Resource> GeResourceByIDQuery(int ID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("ID", ID);
            this.ValidateMethod("GeResourceByIDQuery", parameters);
            return base.CreateQuery<Resource>("GeResourceByID", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="AppointmentResource"/> entity instances using the 'GetAppointmentResources' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="AppointmentResource"/> entity instances.</returns>
        public EntityQuery<AppointmentResource> GetAppointmentResourcesQuery()
        {
            this.ValidateMethod("GetAppointmentResourcesQuery", null);
            return base.CreateQuery<AppointmentResource>("GetAppointmentResources", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Resource"/> entity instances using the 'GetResource' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Resource"/> entity instances.</returns>
        public EntityQuery<Resource> GetResourceQuery()
        {
            this.ValidateMethod("GetResourceQuery", null);
            return base.CreateQuery<Resource>("GetResource", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ResourceType"/> entity instances using the 'GetResourceTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ResourceType"/> entity instances.</returns>
        public EntityQuery<ResourceType> GetResourceTypesQuery()
        {
            this.ValidateMethod("GetResourceTypesQuery", null);
            return base.CreateQuery<ResourceType>("GetResourceTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SqlAppointment"/> entity instances using the 'GetSqlAppointments' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SqlAppointment"/> entity instances.</returns>
        public EntityQuery<SqlAppointment> GetSqlAppointmentsQuery()
        {
            this.ValidateMethod("GetSqlAppointmentsQuery", null);
            return base.CreateQuery<SqlAppointment>("GetSqlAppointments", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserTeam"/> entity instances using the 'GetTeamByName' query.
        /// </summary>
        /// <param name="Name">The value for the 'Name' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserTeam"/> entity instances.</returns>
        public EntityQuery<UserTeam> GetTeamByNameQuery(string Name)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("Name", Name);
            this.ValidateMethod("GetTeamByNameQuery", parameters);
            return base.CreateQuery<UserTeam>("GetTeamByName", parameters, false, false);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="UserTeam"/> entity instances using the 'GetUserTeam' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="UserTeam"/> entity instances.</returns>
        public EntityQuery<UserTeam> GetUserTeamQuery()
        {
            this.ValidateMethod("GetUserTeamQuery", null);
            return base.CreateQuery<UserTeam>("GetUserTeam", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SchedulerDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SchedulerDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISchedulerDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GeResourceByID' operation.
            /// </summary>
            /// <param name="ID">The value for the 'ID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SchedulerDomainService/GeResourceByIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SchedulerDomainService/GeResourceByID", ReplyAction="http://tempuri.org/SchedulerDomainService/GeResourceByIDResponse")]
            [WebGet()]
            IAsyncResult BeginGeResourceByID(int ID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGeResourceByID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGeResourceByID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GeResourceByID' operation.</returns>
            QueryResult<Resource> EndGeResourceByID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetAppointmentResources' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SchedulerDomainService/GetAppointmentResourcesDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SchedulerDomainService/GetAppointmentResources", ReplyAction="http://tempuri.org/SchedulerDomainService/GetAppointmentResourcesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAppointmentResources(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAppointmentResources'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAppointmentResources'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAppointmentResources' operation.</returns>
            QueryResult<AppointmentResource> EndGetAppointmentResources(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResource' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SchedulerDomainService/GetResourceDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SchedulerDomainService/GetResource", ReplyAction="http://tempuri.org/SchedulerDomainService/GetResourceResponse")]
            [WebGet()]
            IAsyncResult BeginGetResource(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResource'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResource'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResource' operation.</returns>
            QueryResult<Resource> EndGetResource(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetResourceTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SchedulerDomainService/GetResourceTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SchedulerDomainService/GetResourceTypes", ReplyAction="http://tempuri.org/SchedulerDomainService/GetResourceTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetResourceTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetResourceTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetResourceTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetResourceTypes' operation.</returns>
            QueryResult<ResourceType> EndGetResourceTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSqlAppointments' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SchedulerDomainService/GetSqlAppointmentsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SchedulerDomainService/GetSqlAppointments", ReplyAction="http://tempuri.org/SchedulerDomainService/GetSqlAppointmentsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSqlAppointments(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSqlAppointments'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSqlAppointments'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSqlAppointments' operation.</returns>
            QueryResult<SqlAppointment> EndGetSqlAppointments(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetTeamByName' operation.
            /// </summary>
            /// <param name="Name">The value for the 'Name' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SchedulerDomainService/GetTeamByNameDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SchedulerDomainService/GetTeamByName", ReplyAction="http://tempuri.org/SchedulerDomainService/GetTeamByNameResponse")]
            [WebGet()]
            IAsyncResult BeginGetTeamByName(string Name, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetTeamByName'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetTeamByName'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetTeamByName' operation.</returns>
            QueryResult<UserTeam> EndGetTeamByName(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetUserTeam' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SchedulerDomainService/GetUserTeamDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SchedulerDomainService/GetUserTeam", ReplyAction="http://tempuri.org/SchedulerDomainService/GetUserTeamResponse")]
            [WebGet()]
            IAsyncResult BeginGetUserTeam(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetUserTeam'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetUserTeam'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetUserTeam' operation.</returns>
            QueryResult<UserTeam> EndGetUserTeam(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SchedulerDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SchedulerDomainService/SubmitChanges", ReplyAction="http://tempuri.org/SchedulerDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SchedulerDomainContextEntityContainer : EntityContainer
        {
            
            public SchedulerDomainContextEntityContainer()
            {
                this.CreateEntitySet<AppointmentResource>(EntitySetOperations.All);
                this.CreateEntitySet<Resource>(EntitySetOperations.All);
                this.CreateEntitySet<ResourceType>(EntitySetOperations.All);
                this.CreateEntitySet<SqlAppointment>(EntitySetOperations.All);
                this.CreateEntitySet<UserTeam>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'SqlAppointment' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MeetingScheduler.Web")]
    public sealed partial class SqlAppointment : Entity
    {
        
        private EntityCollection<AppointmentResource> _appointmentResources;
        
        private string _body;
        
        private string _category;
        
        private DateTime _end;
        
        private Nullable<DateTime> _exceptionDate;
        
        private Guid _id;
        
        private string _importance;
        
        private bool _isAllDayEvent;
        
        private string _location;
        
        private Nullable<Guid> _parentId;
        
        private string _recurrencePattern;
        
        private EntityCollection<SqlAppointment> _sqlAppointments1;
        
        private EntityRef<SqlAppointment> _sqlAppointments2;
        
        private DateTime _start;
        
        private string _subject;
        
        private string _timeMarker;
        
        private string _timeZoneString;
        
        private int _type;
        
        private string _url;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBodyChanging(string value);
        partial void OnBodyChanged();
        partial void OnCategoryChanging(string value);
        partial void OnCategoryChanged();
        partial void OnEndChanging(DateTime value);
        partial void OnEndChanged();
        partial void OnExceptionDateChanging(Nullable<DateTime> value);
        partial void OnExceptionDateChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnImportanceChanging(string value);
        partial void OnImportanceChanged();
        partial void OnIsAllDayEventChanging(bool value);
        partial void OnIsAllDayEventChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnParentIdChanging(Nullable<Guid> value);
        partial void OnParentIdChanged();
        partial void OnRecurrencePatternChanging(string value);
        partial void OnRecurrencePatternChanged();
        partial void OnStartChanging(DateTime value);
        partial void OnStartChanged();
        partial void OnSubjectChanging(string value);
        partial void OnSubjectChanged();
        partial void OnTimeMarkerChanging(string value);
        partial void OnTimeMarkerChanged();
        partial void OnTimeZoneStringChanging(string value);
        partial void OnTimeZoneStringChanged();
        partial void OnTypeChanging(int value);
        partial void OnTypeChanged();
        partial void OnUrlChanging(string value);
        partial void OnUrlChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SqlAppointment"/> class.
        /// </summary>
        public SqlAppointment()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="AppointmentResource"/> entity instances.
        /// </summary>
        [Association("SqlAppointments_AppointmentResources", "Id", "SqlAppointmentId")]
        [XmlIgnore()]
        public EntityCollection<AppointmentResource> AppointmentResources
        {
            get
            {
                if ((this._appointmentResources == null))
                {
                    this._appointmentResources = new EntityCollection<AppointmentResource>(this, "AppointmentResources", this.FilterAppointmentResources, this.AttachAppointmentResources, this.DetachAppointmentResources);
                }
                return this._appointmentResources;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Body' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string Body
        {
            get
            {
                return this._body;
            }
            set
            {
                if ((this._body != value))
                {
                    this.OnBodyChanging(value);
                    this.RaiseDataMemberChanging("Body");
                    this.ValidateProperty("Body", value);
                    this._body = value;
                    this.RaiseDataMemberChanged("Body");
                    this.OnBodyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Category' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    this.OnCategoryChanging(value);
                    this.RaiseDataMemberChanging("Category");
                    this.ValidateProperty("Category", value);
                    this._category = value;
                    this.RaiseDataMemberChanged("Category");
                    this.OnCategoryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'End' value.
        /// </summary>
        [DataMember()]
        public DateTime End
        {
            get
            {
                return this._end;
            }
            set
            {
                if ((this._end != value))
                {
                    this.OnEndChanging(value);
                    this.RaiseDataMemberChanging("End");
                    this.ValidateProperty("End", value);
                    this._end = value;
                    this.RaiseDataMemberChanged("End");
                    this.OnEndChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExceptionDate' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> ExceptionDate
        {
            get
            {
                return this._exceptionDate;
            }
            set
            {
                if ((this._exceptionDate != value))
                {
                    this.OnExceptionDateChanging(value);
                    this.RaiseDataMemberChanging("ExceptionDate");
                    this.ValidateProperty("ExceptionDate", value);
                    this._exceptionDate = value;
                    this.RaiseDataMemberChanged("ExceptionDate");
                    this.OnExceptionDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Importance' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Importance
        {
            get
            {
                return this._importance;
            }
            set
            {
                if ((this._importance != value))
                {
                    this.OnImportanceChanging(value);
                    this.RaiseDataMemberChanging("Importance");
                    this.ValidateProperty("Importance", value);
                    this._importance = value;
                    this.RaiseDataMemberChanged("Importance");
                    this.OnImportanceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsAllDayEvent' value.
        /// </summary>
        [DataMember()]
        public bool IsAllDayEvent
        {
            get
            {
                return this._isAllDayEvent;
            }
            set
            {
                if ((this._isAllDayEvent != value))
                {
                    this.OnIsAllDayEventChanging(value);
                    this.RaiseDataMemberChanging("IsAllDayEvent");
                    this.ValidateProperty("IsAllDayEvent", value);
                    this._isAllDayEvent = value;
                    this.RaiseDataMemberChanged("IsAllDayEvent");
                    this.OnIsAllDayEventChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentId' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<Guid> ParentId
        {
            get
            {
                return this._parentId;
            }
            set
            {
                if ((this._parentId != value))
                {
                    this.OnParentIdChanging(value);
                    this.RaiseDataMemberChanging("ParentId");
                    this.ValidateProperty("ParentId", value);
                    this._parentId = value;
                    this.RaiseDataMemberChanged("ParentId");
                    this.OnParentIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RecurrencePattern' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string RecurrencePattern
        {
            get
            {
                return this._recurrencePattern;
            }
            set
            {
                if ((this._recurrencePattern != value))
                {
                    this.OnRecurrencePatternChanging(value);
                    this.RaiseDataMemberChanging("RecurrencePattern");
                    this.ValidateProperty("RecurrencePattern", value);
                    this._recurrencePattern = value;
                    this.RaiseDataMemberChanged("RecurrencePattern");
                    this.OnRecurrencePatternChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SqlAppointment"/> entity instances.
        /// </summary>
        [Association("SqlAppointments_SqlAppointments", "Id", "ParentId")]
        [XmlIgnore()]
        public EntityCollection<SqlAppointment> SqlAppointments1
        {
            get
            {
                if ((this._sqlAppointments1 == null))
                {
                    this._sqlAppointments1 = new EntityCollection<SqlAppointment>(this, "SqlAppointments1", this.FilterSqlAppointments1, this.AttachSqlAppointments1, this.DetachSqlAppointments1);
                }
                return this._sqlAppointments1;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SqlAppointment"/> entity.
        /// </summary>
        [Association("SqlAppointments_SqlAppointments", "ParentId", "Id", IsForeignKey=true)]
        [XmlIgnore()]
        public SqlAppointment SqlAppointments2
        {
            get
            {
                if ((this._sqlAppointments2 == null))
                {
                    this._sqlAppointments2 = new EntityRef<SqlAppointment>(this, "SqlAppointments2", this.FilterSqlAppointments2);
                }
                return this._sqlAppointments2.Entity;
            }
            set
            {
                SqlAppointment previous = this.SqlAppointments2;
                if ((previous != value))
                {
                    this.ValidateProperty("SqlAppointments2", value);
                    if ((previous != null))
                    {
                        this._sqlAppointments2.Entity = null;
                        previous.SqlAppointments1.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.ParentId = value.Id;
                    }
                    else
                    {
                        this.ParentId = default(Nullable<Guid>);
                    }
                    this._sqlAppointments2.Entity = value;
                    if ((value != null))
                    {
                        value.SqlAppointments1.Add(this);
                    }
                    this.RaisePropertyChanged("SqlAppointments2");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Start' value.
        /// </summary>
        [DataMember()]
        public DateTime Start
        {
            get
            {
                return this._start;
            }
            set
            {
                if ((this._start != value))
                {
                    this.OnStartChanging(value);
                    this.RaiseDataMemberChanging("Start");
                    this.ValidateProperty("Start", value);
                    this._start = value;
                    this.RaiseDataMemberChanged("Start");
                    this.OnStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Subject' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Subject
        {
            get
            {
                return this._subject;
            }
            set
            {
                if ((this._subject != value))
                {
                    this.OnSubjectChanging(value);
                    this.RaiseDataMemberChanging("Subject");
                    this.ValidateProperty("Subject", value);
                    this._subject = value;
                    this.RaiseDataMemberChanged("Subject");
                    this.OnSubjectChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeMarker' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string TimeMarker
        {
            get
            {
                return this._timeMarker;
            }
            set
            {
                if ((this._timeMarker != value))
                {
                    this.OnTimeMarkerChanging(value);
                    this.RaiseDataMemberChanging("TimeMarker");
                    this.ValidateProperty("TimeMarker", value);
                    this._timeMarker = value;
                    this.RaiseDataMemberChanged("TimeMarker");
                    this.OnTimeMarkerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeZoneString' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string TimeZoneString
        {
            get
            {
                return this._timeZoneString;
            }
            set
            {
                if ((this._timeZoneString != value))
                {
                    this.OnTimeZoneStringChanging(value);
                    this.RaiseDataMemberChanging("TimeZoneString");
                    this.ValidateProperty("TimeZoneString", value);
                    this._timeZoneString = value;
                    this.RaiseDataMemberChanged("TimeZoneString");
                    this.OnTimeZoneStringChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        public int Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Url' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Url
        {
            get
            {
                return this._url;
            }
            set
            {
                if ((this._url != value))
                {
                    this.OnUrlChanging(value);
                    this.RaiseDataMemberChanging("Url");
                    this.ValidateProperty("Url", value);
                    this._url = value;
                    this.RaiseDataMemberChanged("Url");
                    this.OnUrlChanged();
                }
            }
        }
        
        private void AttachAppointmentResources(AppointmentResource entity)
        {
            entity.SqlAppointments = this;
        }
        
        private void DetachAppointmentResources(AppointmentResource entity)
        {
            entity.SqlAppointments = null;
        }
        
        private bool FilterAppointmentResources(AppointmentResource entity)
        {
            return (entity.SqlAppointmentId == this.Id);
        }
        
        private void AttachSqlAppointments1(SqlAppointment entity)
        {
            entity.SqlAppointments2 = this;
        }
        
        private void DetachSqlAppointments1(SqlAppointment entity)
        {
            entity.SqlAppointments2 = null;
        }
        
        private bool FilterSqlAppointments1(SqlAppointment entity)
        {
            return (entity.ParentId == this.Id);
        }
        
        private bool FilterSqlAppointments2(SqlAppointment entity)
        {
            return (entity.Id == this.ParentId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'User' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MeetingScheduler.Web")]
    public sealed partial class User : Entity, global::System.Security.Principal.IIdentity, global::System.Security.Principal.IPrincipal
    {
        
        private string _friendlyName;
        
        private string _name = string.Empty;
        
        private IEnumerable<string> _roles;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFriendlyNameChanging(string value);
        partial void OnFriendlyNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRolesChanging(IEnumerable<string> value);
        partial void OnRolesChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        public User()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FriendlyName' value.
        /// </summary>
        [DataMember()]
        public string FriendlyName
        {
            get
            {
                return this._friendlyName;
            }
            set
            {
                if ((this._friendlyName != value))
                {
                    this.OnFriendlyNameChanging(value);
                    this.RaiseDataMemberChanging("FriendlyName");
                    this.ValidateProperty("FriendlyName", value);
                    this._friendlyName = value;
                    this.RaiseDataMemberChanged("FriendlyName");
                    this.OnFriendlyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaisePropertyChanged("Name");
                    this.OnNameChanged();
                    this.RaisePropertyChanged("IsAuthenticated");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Roles' value.
        /// </summary>
        [DataMember()]
        [Editable(false)]
        public IEnumerable<string> Roles
        {
            get
            {
                return this._roles;
            }
            set
            {
                if ((this._roles != value))
                {
                    this.OnRolesChanging(value);
                    this.ValidateProperty("Roles", value);
                    this._roles = value;
                    this.RaisePropertyChanged("Roles");
                    this.OnRolesChanged();
                }
            }
        }
        
        string global::System.Security.Principal.IIdentity.AuthenticationType
        {
            get
            {
                return string.Empty;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the identity is authenticated.
        /// </summary>
        /// <remarks>
        /// This value is <c>true</c> if <see cref="Name"/> is not <c>null</c> or empty.
        /// </remarks>
        public bool IsAuthenticated
        {
            get
            {
                return (true != string.IsNullOrEmpty(this.Name));
            }
        }
        
        string global::System.Security.Principal.IIdentity.Name
        {
            get
            {
                return this.Name;
            }
        }
        
        global::System.Security.Principal.IIdentity global::System.Security.Principal.IPrincipal.Identity
        {
            get
            {
                return this;
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._name;
        }
        
        /// <summary>
        /// Return whether the principal is in the role.
        /// </summary>
        /// <remarks>
        /// Returns whether the specified role is contained in the roles.
        /// This implementation is case sensitive.
        /// </remarks>
        /// <param name="role">The name of the role for which to check membership.</param>
        /// <returns>Whether the principal is in the role.</returns>
        public bool IsInRole(string role)
        {
            if ((this.Roles == null))
            {
                return false;
            }
            return global::System.Linq.Enumerable.Contains(this.Roles, role);
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'UserRegistrationService' DomainService.
    /// </summary>
    public sealed partial class UserRegistrationContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class.
        /// </summary>
        public UserRegistrationContext() : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(new Uri("MeetingScheduler-Web-UserRegistrationService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The UserRegistrationService service URI.</param>
        public UserRegistrationContext(Uri serviceUri) : 
                this(new WebDomainClient<IUserRegistrationServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRegistrationContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public UserRegistrationContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password, Action<InvokeOperation<CreateUserStatus>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'CreateUser' method of the DomainService.
        /// </summary>
        /// <param name="user">The value for the 'user' parameter of this action.</param>
        /// <param name="password">The value for the 'password' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<CreateUserStatus> CreateUser(RegistrationData user, [RegularExpression("^.*[^a-zA-Z0-9].*$", ErrorMessageResourceName="ValidationErrorBadPasswordStrength", ErrorMessageResourceType=typeof(ValidationErrorResources))] [Required(ErrorMessageResourceName="ValidationErrorRequiredField", ErrorMessageResourceType=typeof(ValidationErrorResources))] [StringLength(50, ErrorMessageResourceName="ValidationErrorBadPasswordLength", ErrorMessageResourceType=typeof(ValidationErrorResources), MinimumLength=7)] string password)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("user", user);
            parameters.Add("password", password);
            this.ValidateMethod("CreateUser", parameters);
            return ((InvokeOperation<CreateUserStatus>)(this.InvokeOperation("CreateUser", typeof(CreateUserStatus), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new UserRegistrationContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'UserRegistrationService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IUserRegistrationServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'CreateUser' operation.
            /// </summary>
            /// <param name="user">The value for the 'user' parameter of this action.</param>
            /// <param name="password">The value for the 'password' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/UserRegistrationService/CreateUserDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/UserRegistrationService/CreateUser", ReplyAction="http://tempuri.org/UserRegistrationService/CreateUserResponse")]
            IAsyncResult BeginCreateUser(RegistrationData user, string password, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginCreateUser'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginCreateUser'.</param>
            /// <returns>The 'CreateUserStatus' returned from the 'CreateUser' operation.</returns>
            CreateUserStatus EndCreateUser(IAsyncResult result);
        }
        
        internal sealed class UserRegistrationContextEntityContainer : EntityContainer
        {
            
            public UserRegistrationContextEntityContainer()
            {
            }
        }
    }
    
    /// <summary>
    /// The 'UserTeam' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MeetingScheduler.Web")]
    public sealed partial class UserTeam : Entity
    {
        
        private int _id;
        
        private EntityRef<Resource> _resource;
        
        private int _team;
        
        private string _user;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnidChanging(int value);
        partial void OnidChanged();
        partial void OnTeamChanging(int value);
        partial void OnTeamChanged();
        partial void OnUserChanging(string value);
        partial void OnUserChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTeam"/> class.
        /// </summary>
        public UserTeam()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'id' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(AutoGenerateField=false)]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnidChanging(value);
                    this.ValidateProperty("id", value);
                    this._id = value;
                    this.RaisePropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Resource"/> entity.
        /// </summary>
        [Association("Resource_UserTeam", "Team", "Id", IsForeignKey=true)]
        [Display(AutoGenerateField=false)]
        [XmlIgnore()]
        public Resource Resource
        {
            get
            {
                if ((this._resource == null))
                {
                    this._resource = new EntityRef<Resource>(this, "Resource", this.FilterResource);
                }
                return this._resource.Entity;
            }
            set
            {
                Resource previous = this.Resource;
                if ((previous != value))
                {
                    this.ValidateProperty("Resource", value);
                    if ((previous != null))
                    {
                        this._resource.Entity = null;
                        previous.UserTeam.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.Team = value.Id;
                    }
                    else
                    {
                        this.Team = default(int);
                    }
                    this._resource.Entity = value;
                    if ((value != null))
                    {
                        value.UserTeam.Add(this);
                    }
                    this.RaisePropertyChanged("Resource");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Team' value.
        /// </summary>
        [DataMember()]
        [Display(Order=1)]
        [RoundtripOriginal()]
        public int Team
        {
            get
            {
                return this._team;
            }
            set
            {
                if ((this._team != value))
                {
                    this.OnTeamChanging(value);
                    this.RaiseDataMemberChanging("Team");
                    this.ValidateProperty("Team", value);
                    this._team = value;
                    this.RaiseDataMemberChanged("Team");
                    this.OnTeamChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'User' value.
        /// </summary>
        [DataMember()]
        [Display(Order=0)]
        [Required()]
        [StringLength(50)]
        public string User
        {
            get
            {
                return this._user;
            }
            set
            {
                if ((this._user != value))
                {
                    this.OnUserChanging(value);
                    this.RaiseDataMemberChanging("User");
                    this.ValidateProperty("User", value);
                    this._user = value;
                    this.RaiseDataMemberChanged("User");
                    this.OnUserChanged();
                }
            }
        }
        
        private bool FilterResource(Resource entity)
        {
            return (entity.Id == this.Team);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
